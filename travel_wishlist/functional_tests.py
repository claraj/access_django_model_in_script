from selenium.webdriver.firefox.webdriver import WebDriver
from selenium.webdriver.support import expected_conditions as EC
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait

from django.test import LiveServerTestCase

from .models import Place

class TitleTest(LiveServerTestCase):

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.selenium = WebDriver()
        cls.selenium.implicitly_wait(10)

    @classmethod
    def tearDownClass(cls):
        cls.selenium.quit()
        super().tearDownClass()


    def test_title_shown_on_home_page(self):
        self.selenium.get(self.live_server_url)
        self.assertIn(self.selenium.title, 'Travel Wishlist')



class AddPlacesTests(LiveServerTestCase):

    fixtures = ['test_places']

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.selenium = WebDriver()
        cls.selenium.implicitly_wait(10)

    @classmethod
    def tearDownClass(cls):
        cls.selenium.quit()
        super().tearDownClass()


    def test_add_new_place(self):

        self.selenium.get(self.live_server_url)   # Load home page
        input_name = self.selenium.find_element_by_id('id_name') # find input text box. id was generated by Django forms
        input_name.send_keys('Denver')  # Enter place name 
        add_button = self.selenium.find_element_by_id('add-new-place')  # Find the add button
        add_button.click()      # And click it

        # Expect new element to appear on page. Is the text 'Denver'?
        denver = self.selenium.find_element_by_id('place-name-5')
        self.assertEqual('Denver', denver.text)

        # Another way to check for text on a page - more general
        self.assertIn('Denver', self.selenium.page_source)

        # Assert places from test_places are on page
        self.assertIn('Tokyo', self.selenium.page_source)
        self.assertIn('New York', self.selenium.page_source)

        # as well as checking the user interface, can check the database too
        # this will error if Denver, pk=5 isn't there 
        denver_db = Place.objects.get(pk=5)
        self.assertEqual('Denver', denver_db.name)
        self.assertFalse(denver_db.visited)



class EditPlacesTests(LiveServerTestCase):

    fixtures = ['test_places']

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.selenium = WebDriver()
        cls.selenium.implicitly_wait(10)

    @classmethod
    def tearDownClass(cls):
        cls.selenium.quit()
        super().tearDownClass()


    def test_mark_place_as_visited(self):

        self.selenium.get(self.live_server_url)  # Load home page
        
        # find visited button. It will have the id visited_pk
        # Where pk = primary key of item. This was configured in the template
        # Let's mark New York, pk=2 visited
        visited_button = self.selenium.find_element_by_id('visited-button-2')
       
        self.selenium.find_element_by_id('place-name-2')  # find the place name text 

        visited_button.click()  # click button 

        # But now page has to reload. How to get Selenium to wait,
        # And to realize it's a new page, so refresh it's
        # knowledge of the elements on it?
        # Can use an Explicit Wait for a particular condition - in this case, the
        # absence of an element with id = place-name-2

        wait = WebDriverWait(self.selenium, 3)
        wait.until(EC.invisibility_of_element_located((By.ID, 'place-name-2')))

        # Assert Tokyo is still on page
        self.assertIn('Tokyo', self.selenium.page_source)
    
        # But New York is not
        self.assertNotIn('New York', self.selenium.page_source)

        # Load visited page
        self.selenium.get(self.live_server_url + '/visited')

        # New York should be on the visited page
        self.assertIn('New York', self.selenium.page_source)

        # As well as our other visited places
        self.assertIn('San Francisco', self.selenium.page_source)
        self.assertIn('Moab', self.selenium.page_source)

        # And let's verify the database is updated - New York visited is True
        new_york = Place.objects.get(pk=2)
        self.assertTrue(new_york.visited)


class PageContentTests(LiveServerTestCase):

    fixtures = ['test_places']

    @classmethod
    def setUpClass(cls):
        super().setUpClass()
        cls.selenium = WebDriver()
        cls.selenium.implicitly_wait(10)


    @classmethod
    def tearDownClass(cls):
        cls.selenium.quit()
        super().tearDownClass()


    def test_get_home_page_list_of_places(self):

        self.selenium.get(self.live_server_url)

        self.assertIn('Tokyo', self.selenium.page_source)
        self.assertIn('New York', self.selenium.page_source)

        self.assertNotIn('San Francisco', self.selenium.page_source)
        self.assertNotIn('Moab', self.selenium.page_source)


    def test_get_list_of_visited_places(self):

        self.selenium.get(self.live_server_url + '/visited')
    
        self.assertNotIn('Tokyo', self.selenium.page_source)
        self.assertNotIn('New York', self.selenium.page_source)

        self.assertIn('San Francisco', self.selenium.page_source)
        self.assertIn('Moab', self.selenium.page_source)

